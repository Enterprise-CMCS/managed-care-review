service: app-api

frameworkVersion: '4.2.3'

package:
  individually: true
  patterns:
    - '!node_modules/prisma'
    - '!node_modules/.prisma'
    - '!node_modules/@prisma'

plugins:
  - serverless-esbuild
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-iam-helper
  - serverless-offline

build:
  esbuild: false

custom:
  applicationEndpoint: ${env:APPLICATION_ENDPOINT, cf:ui-${sls:stage}.CloudFrontEndpointUrl}
  appApiGatewayId: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:infra-api-${sls:stage}.ApiGatewayRestApiId}
  appApiGatewayRootResourceId: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:infra-api-${sls:stage}.AppApiGatewayRootResourceId}
  appApiWafAclArn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:infra-api-${sls:stage}.WafPluginAclArn}
  emailerMode: ${env:EMAILER_MODE, ssm:/configuration/emailer_mode}
  parameterStoreMode: ${env:PARAMETER_STORE_MODE, ssm:/configuration/parameterStoreMode}
  auroraV2Arn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:postgres-${sls:stage}.PostgresAuroraV2Arn }
  document_uploads_bucket_arn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:uploads-${sls:stage}.DocumentUploadsBucketArn}
  qa_uploads_bucket_arn: ${env:CF_CONFIG_IGNORED_LOCALLY, cf:uploads-${sls:stage}.QAUploadsBucketArn}
  secretsManagerSecret: aurora_postgres_${sls:stage} #pragma: allowlist secret
  reactAppAuthMode: ${env:VITE_APP_AUTH_MODE}
  apiAppOtelCollectorUrl: ${env:API_APP_OTEL_COLLECTOR_URL, ssm:/configuration/api_app_otel_collector_url}
  dbURL: ${env:DATABASE_URL}
  ldSDKKey: ${env:LD_SDK_KEY, ssm:/configuration/ld_sdk_key_feds}
  internalAllowedOrigins: ${env:INTERNAL_ALLOWED_ORIGINS, ''}
  ddApiKey: ${env:DD_API_KEY}
  # because the secret is in JSON in secret manager, we have to pass it into jwtSecret when not running locally
  jwtSecretJSON: ${env:CF_CONFIG_IGNORED_LOCALLY, ssm:/aws/reference/secretsmanager/api_jwt_secret_${sls:stage}}
  jwtSecret: ${env:JWT_SECRET, self:custom.jwtSecretJSON.jwtsigningkey}
  reactAppS3DocumentUploadsBucket: ${env:VITE_APP_S3_DOCUMENTS_BUCKET, cf:uploads-${sls:stage}.DocumentUploadsBucketName}
  reactAppS3QABucket: ${env:VITE_APP_S3_QA_BUCKET, cf:uploads-${sls:stage}.QAUploadsBucketName}
  esbuild:
    config: './esbuild.config.js'
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main
  vpcId: ${env:VPC_ID}
  sgId: ${env:SG_ID}
  privateSubnets:
    - ${env:SUBNET_PRIVATE_A_ID}
    - ${env:SUBNET_PRIVATE_B_ID}
    - ${env:SUBNET_PRIVATE_C_ID}
  iamPermissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY}
  iamPath: ${env:IAM_PATH}
  lambdaMemory:
    prod: 4096
    default: 1024
  lambdaTmp:
    prod: 2048
    default: 512
  instanceId: ${sls:instanceId}

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: dev
  apiGateway:
    restApiId: ${self:custom.appApiGatewayId}
    restApiRootResourceId: ${self:custom.appApiGatewayRootResourceId}
  layers:
    - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: ${self:custom.iamPermissionsBoundary}
      statements:
        - Effect: 'Allow' # cognito user lookup
          Action:
            - cognito-idp:ListUsers
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - secretsmanager:GetSecretValue #pragma: allowlist secret
            - secretsmanager:DescribeSecret #pragma: allowlist secret
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - rds-db:connect
          Resource:
            - ${self:custom.auroraV2Arn}
        - Effect: 'Allow'
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - lambda:InvokeFunction
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - 's3:*'
          Resource:
            # this is the "public" folder for all regular uploads from Amplify
            - ${self:custom.document_uploads_bucket_arn}/allusers/*
            - ${self:custom.qa_uploads_bucket_arn}/allusers/*
            - ${self:custom.document_uploads_bucket_arn}/zips/*
        - Effect: 'Allow'
          Action:
            - 's3:ListBucket'
            - 's3:GetBucketLocation'
          Resource:
            - ${self:custom.document_uploads_bucket_arn}
            - ${self:custom.qa_uploads_bucket_arn}
        - Effect: 'Allow'
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - rds:CreateDBClusterSnapshot
            - rds:CreateDBSnapshot
            - rds:CopyDBClusterSnapshot
            - rds:CopyDBSnapshot
            - rds:DescribeDBClusterSnapshots
            - rds:DeleteDBClusterSnapshot
          Resource: '*'

  environment:
    stage: ${sls:stage}
    REGION: ${self:provider.region}
    DATABASE_URL: ${self:custom.dbURL}
    VITE_APP_AUTH_MODE: ${self:custom.reactAppAuthMode}
    API_APP_OTEL_COLLECTOR_URL: ${self:custom.apiAppOtelCollectorUrl}
    SECRETS_MANAGER_SECRET: ${self:custom.secretsManagerSecret}
    EMAILER_MODE: ${self:custom.emailerMode}
    PARAMETER_STORE_MODE: ${self:custom.parameterStoreMode}
    APPLICATION_ENDPOINT: ${self:custom.applicationEndpoint, 'http://localhost:3000'}
    AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-handler
    OPENTELEMETRY_COLLECTOR_CONFIG_FILE: /var/task/collector.yml
    LD_SDK_KEY: ${self:custom.ldSDKKey}
    JWT_SECRET: ${self:custom.jwtSecret}
    VITE_APP_S3_QA_BUCKET: ${self:custom.reactAppS3QABucket}
    VITE_APP_S3_DOCUMENTS_BUCKET: ${self:custom.reactAppS3DocumentUploadsBucket}
    INTERNAL_ALLOWED_ORIGINS: ${self:custom.internalAllowedOrigins, ''}
    DD_API_KEY: ${self:custom.ddApiKey}
layers:
  prismaClientMigration:
    path: lambda-layers-prisma-client-migration
  prismaClientEngine:
    path: lambda-layers-prisma-client-engine

functions:
  email_submit:
    handler: src/handlers/email_submit.main

  oauth_token:
    handler: src/handlers/oauth_token.main
    events:
      - http:
          path: oauth/token
          method: post
          cors: true
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientEngineLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4

  health:
    handler: src/handlers/health_check.main
    events:
      - http:
          path: health_check
          method: get
          cors: true

  third_party_api_authorizer:
    handler: src/handlers/third_party_API_authorizer.main

  otel:
    handler: src/handlers/otel_proxy.main
    events:
      - http:
          path: otel
          method: post
          cors: true

  graphql:
    handler: src/handlers/apollo_gql.gqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: graphql
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: v1/graphql/external
          method: post
          cors: true
          authorizer:
            name: third_party_api_authorizer
            identitySource: method.request.header.Authorization
      - http:
          path: v1/graphql/external
          method: get
          cors: true
          authorizer:
            name: third_party_api_authorizer
            identitySource: method.request.header.Authorization
    timeout: 30 # aurora cold start can be long
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientEngineLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4

  migrate:
    handler: src/handlers/postgres_migrate.main
    timeout: 60
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientMigrationLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4

  cleanup:
    handler: src/handlers/cleanup.main
    events:
      - schedule: cron(0 14 ? * MON-FRI *)
    layers:
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4

  auditFiles:
    handler: src/handlers/audit_s3.main
    timeout: 60
    vpc:
      securityGroupIds:
        - ${self:custom.sgId}
      subnetIds: ${self:custom.privateSubnets}
    layers:
      - !Ref PrismaClientEngineLambdaLayer
      - arn:aws:lambda:us-east-1:901920570463:layer:aws-otel-nodejs-amd64-ver-1-18-1:4

resources:
  Resources:
    ApiGwWebAclAssociation:
      Type: AWS::WAFv2::WebACLAssociation
      DependsOn:
        # API Gateway methods
        - ApiGatewayMethodHealthcheckGet
        - ApiGatewayMethodOtelPost
        - ApiGatewayMethodGraphqlPost
        - ApiGatewayMethodGraphqlGet
        - ApiGatewayMethodV1GraphqlExternalPost
        - ApiGatewayMethodV1GraphqlExternalGet
        # API Gateway resources (paths and endpoints)
        - ApiGatewayResourceHealthcheck
        - ApiGatewayResourceOtel
        - ApiGatewayResourceGraphql
        - ApiGatewayResourceV1
        - ApiGatewayResourceV1Graphql
        - ApiGatewayResourceV1GraphqlExternal
        # API Gateway authorizer
        - ThirdUnderscorepartyUnderscoreapiUnderscoreauthorizerApiGatewayAuthorizer
        # CORS OPTIONS methods
        - ApiGatewayMethodHealthcheckOptions
        - ApiGatewayMethodOtelOptions
        - ApiGatewayMethodGraphqlOptions
        - ApiGatewayMethodV1GraphqlExternalOptions

      Properties:
        ResourceArn: arn:aws:apigateway:${self:provider.region}::/restapis/${self:custom.appApiGatewayId}/stages/${sls:stage}
        WebACLArn: ${self:custom.appApiWafAclArn}
  Outputs:
    ApiAuthMode:
      Value: ${self:custom.reactAppAuthMode}
    Region:
      Value: !Sub ${AWS::Region}
