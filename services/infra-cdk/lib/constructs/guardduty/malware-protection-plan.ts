/**
 * GuardDuty Malware Protection Plan
 * 
 * Creates and manages malware protection plans for S3 buckets
 */

import { Construct } from 'constructs';
import * as guardduty from 'aws-cdk-lib/aws-guardduty';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as s3 from 'aws-cdk-lib/aws-s3';
import { CfnOutput } from 'aws-cdk-lib';
import { SERVICES } from '@config/index';

export interface MalwareProtectionPlanProps {
  stage: string;
  bucket: s3.IBucket;
  bucketType: 'uploads' | 'qa';
  malwareProtectionRole: iam.IRole;
  objectPrefixes?: string[];
}

export class MalwareProtectionPlan extends Construct {
  public readonly plan: guardduty.CfnMalwareProtectionPlan;
  public readonly planId: string;

  constructor(scope: Construct, id: string, props: MalwareProtectionPlanProps) {
    super(scope, id);

    const planName = `${props.bucketType.charAt(0).toUpperCase()}${props.bucketType.slice(1)}MalwareProtectionPlan`;

    this.plan = new guardduty.CfnMalwareProtectionPlan(this, planName, {
      role: props.malwareProtectionRole.roleArn,
      protectedResource: {
        s3Bucket: {
          bucketName: props.bucket.bucketName,
          objectPrefixes: props.objectPrefixes
        }
      },
      actions: {
        tagging: {
          status: 'ENABLED' // Enable automatic tagging with scan results
        }
      },
      tags: [
        { key: 'Environment', value: props.stage },
        { key: 'Purpose', value: 'MalwareScanning' },
        { key: 'ManagedBy', value: 'CDK' },
        { key: 'Service', value: SERVICES.UPLOADS },
        { key: 'BucketType', value: props.bucketType }
      ]
    });

    this.planId = this.plan.ref;

    // Create output
    new CfnOutput(this, `${planName}Id`, {
      value: this.planId,
      description: `${props.bucketType} bucket Malware Protection Plan ID`,
      exportName: `GuardDuty-${props.stage}-${props.bucketType}-PlanId`
    });
  }
}

/**
 * Factory for creating the IAM role needed by malware protection plans
 */
export class MalwareProtectionRole extends Construct {
  public readonly role: iam.Role;

  constructor(scope: Construct, id: string, props: {
    stage: string;
    buckets: s3.IBucket[];
  }) {
    super(scope, id);

    this.role = new iam.Role(this, 'Role', {
      roleName: `guardduty-malware-protection-${props.stage}`,
      assumedBy: new iam.ServicePrincipal('malware-protection.guardduty.amazonaws.com'),
      description: 'Role for GuardDuty Malware Protection to scan S3 objects',
      inlinePolicies: {
        S3ScanPolicy: new iam.PolicyDocument({
          statements: [
            // Read permissions for scanning
            new iam.PolicyStatement({
              effect: iam.Effect.ALLOW,
              actions: [
                's3:GetObject',
                's3:GetObjectVersion',
                's3:GetObjectAttributes',
                's3:ListBucket'
              ],
              resources: [
                ...props.buckets.map(b => b.bucketArn),
                ...props.buckets.map(b => `${b.bucketArn}/*`)
              ]
            }),
            // Tagging permissions for scan results
            new iam.PolicyStatement({
              effect: iam.Effect.ALLOW,
              actions: [
                's3:PutObjectTagging',
                's3:PutObjectVersionTagging',
                's3:GetObjectTagging',
                's3:GetObjectVersionTagging'
              ],
              resources: props.buckets.map(b => `${b.bucketArn}/*`)
            }),
            // KMS permissions for encrypted buckets
            new iam.PolicyStatement({
              effect: iam.Effect.ALLOW,
              actions: [
                'kms:Decrypt',
                'kms:DescribeKey'
              ],
              resources: ['*'],
              conditions: {
                StringEquals: {
                  'kms:ViaService': [
                    `s3.${process.env.CDK_DEFAULT_REGION}.amazonaws.com`
                  ]
                }
              }
            })
          ]
        })
      }
    });
  }
}