/**
 * GuardDuty Malware Protection Stack
 * 
 * Provides serverless virus scanning using GuardDuty Malware Protection
 * with modular constructs for better maintainability
 */

import { BaseStack, BaseStackProps } from '@constructs/base';
import { Construct } from 'constructs';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as cloudwatch from 'aws-cdk-lib/aws-cloudwatch';
import { Tags, Duration } from 'aws-cdk-lib';
import { 
  GuardDutyDetectorManager,
  MalwareProtectionRole,
  MalwareProtectionPlan,
  VirusScanPolicies,
  ScanEventProcessor,
  RescanCapability
} from '@constructs/guardduty';

export interface GuardDutyMalwareProtectionStackProps extends BaseStackProps {
  uploadsBucket: s3.IBucket;
  qaBucket: s3.IBucket;
  alertEmail?: string;
  enableClamAvCompatibility?: boolean;
  enableRescanCapability?: boolean;
  vpc?: ec2.IVpc;
  lambdaSecurityGroup?: ec2.ISecurityGroup;
}

/**
 * GuardDuty Malware Protection stack for S3 virus scanning
 */
export class GuardDutyMalwareProtectionStack extends BaseStack {
  // Store props for use in defineResources
  private readonly props: GuardDutyMalwareProtectionStackProps;
  
  // Core components
  public detectorManager: GuardDutyDetectorManager;
  public malwareProtectionRole: MalwareProtectionRole;
  
  // Protection plans
  public uploadsPlan: MalwareProtectionPlan;
  public qaPlan: MalwareProtectionPlan;
  
  // Event processing
  public scanEventProcessor: ScanEventProcessor;
  
  // Optional features
  public rescanCapability?: RescanCapability;

  constructor(scope: Construct, id: string, props: GuardDutyMalwareProtectionStackProps) {
    super(scope, id, {
      ...props,
      description: 'GuardDuty Malware Protection stack - Serverless virus scanning'
    });
    
    this.props = props;
    
    // Only enable GuardDuty for non-ephemeral environments
    if (this.stage !== 'ephemeral') {
      this.defineResources();
    }
  }

  protected defineResources(): void {
    // 1. Create or get existing GuardDuty detector
    this.detectorManager = new GuardDutyDetectorManager(this, 'DetectorManager', {
      stage: this.stage
    });

    // 2. Create IAM role for malware protection
    this.malwareProtectionRole = new MalwareProtectionRole(this, 'MalwareProtectionRole', {
      stage: this.stage,
      buckets: [this.props.uploadsBucket, this.props.qaBucket]
    });

    // 3. Create malware protection plans
    this.uploadsPlan = new MalwareProtectionPlan(this, 'UploadsPlan', {
      stage: this.stage,
      bucket: this.props.uploadsBucket,
      bucketType: 'uploads',
      malwareProtectionRole: this.malwareProtectionRole.role
    });

    this.qaPlan = new MalwareProtectionPlan(this, 'QaPlan', {
      stage: this.stage,
      bucket: this.props.qaBucket,
      bucketType: 'qa',
      malwareProtectionRole: this.malwareProtectionRole.role,
      objectPrefixes: ['documents/', 'uploads/', 'submissions/']
    });

    // 4. Add virus scan policies to buckets
    new VirusScanPolicies(this, 'UploadsBucketPolicies', {
      bucket: this.props.uploadsBucket,
      bucketName: 'uploads',
      lambdaExecutionRoleArn: this.props.lambdaSecurityGroup ? undefined : '*'
    });

    new VirusScanPolicies(this, 'QaBucketPolicies', {
      bucket: this.props.qaBucket,
      bucketName: 'qa',
      lambdaExecutionRoleArn: this.props.lambdaSecurityGroup ? undefined : '*'
    });

    // 5. Create scan event processor
    this.scanEventProcessor = new ScanEventProcessor(this, 'ScanEventProcessor', {
      stage: this.stage,
      stageConfig: this.stageConfig,
      uploadsBucket: this.props.uploadsBucket,
      qaBucket: this.props.qaBucket,
      alertEmail: this.props.alertEmail,
      enableClamAvCompatibility: this.props.enableClamAvCompatibility,
      vpc: this.props.vpc,
      vpcSubnets: this.props.vpc ? { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS } : undefined,
      securityGroups: this.props.lambdaSecurityGroup ? [this.props.lambdaSecurityGroup] : undefined
    });

    // 6. Create rescan capability if enabled
    if (this.props.enableRescanCapability) {
      this.rescanCapability = new RescanCapability(this, 'RescanCapability', {
        stage: this.stage,
        stageConfig: this.stageConfig,
        uploadsBucket: this.props.uploadsBucket,
        qaBucket: this.props.qaBucket,
        vpc: this.props.vpc,
        vpcSubnets: this.props.vpc ? { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS } : undefined,
        securityGroups: this.props.lambdaSecurityGroup ? [this.props.lambdaSecurityGroup] : undefined
      });
    }

    // 7. Create CloudWatch dashboard for monitoring
    if (this.stageConfig.monitoring.dashboardEnabled) {
      this.createMonitoringDashboard(this.props);
    }

    // 8. Apply tags to all resources
    Tags.of(this).add('Service', 'GuardDutyMalwareProtection');
      }

  private createMonitoringDashboard(props: GuardDutyMalwareProtectionStackProps): void {
    const dashboard = new cloudwatch.Dashboard(this, 'MalwareProtectionDashboard', {
      dashboardName: `guardduty-malware-${this.stage}`,
      defaultInterval: Duration.hours(1)
    });

    // Add widgets for scan metrics
    dashboard.addWidgets(
      new cloudwatch.GraphWidget({
        title: 'Scan Results',
        left: [
          new cloudwatch.Metric({
            namespace: 'AWS/GuardDuty',
            metricName: 'ScansCompleted',
            dimensionsMap: {
              DetectorId: this.detectorManager.detectorId
            }
          })
        ],
        right: [
          new cloudwatch.Metric({
            namespace: 'AWS/GuardDuty',
            metricName: 'ThreatsDetected',
            dimensionsMap: {
              DetectorId: this.detectorManager.detectorId
            }
          })
        ]
      }),
      new cloudwatch.GraphWidget({
        title: 'Lambda Invocations',
        left: [
          new cloudwatch.Metric({
            namespace: 'AWS/Lambda',
            metricName: 'Invocations',
            dimensionsMap: {
              FunctionName: this.scanEventProcessor.scanResultProcessor.functionName
            }
          })
        ],
        right: [
          new cloudwatch.Metric({
            namespace: 'AWS/Lambda',
            metricName: 'Errors',
            dimensionsMap: {
              FunctionName: this.scanEventProcessor.scanResultProcessor.functionName
            }
          })
        ]
      })
    );

    // Add rescan metrics if enabled
    if (this.rescanCapability) {
      dashboard.addWidgets(
        new cloudwatch.GraphWidget({
          title: 'Rescan Queue',
          left: [
            new cloudwatch.Metric({
              namespace: 'AWS/SQS',
              metricName: 'ApproximateNumberOfMessagesVisible',
              dimensionsMap: {
                QueueName: this.rescanCapability.rescanQueue.queueName
              }
            })
          ]
        })
      );
    }
  }
}