service: ui-auth

frameworkVersion: '4.2.3'

plugins:
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-iam-helper

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${aws:region}
  document_uploads_bucket_arn: ${cf:uploads-${sls:stage}.DocumentUploadsBucketArn}
  qa_uploads_bucket_arn: ${cf:uploads-${sls:stage}.QAUploadsBucketArn}
  api_gateway_rest_api_name: ${cf:infra-api-${sls:stage}.ApiGatewayRestApiId}
  application_endpoint_url: ${cf:ui-${sls:stage}.CloudFrontEndpointUrl}
  okta_metadata_url: ${ssm:/configuration/okta_metadata_url}
  sesSourceEmailAddress: ${ssm:/configuration/email/sourceAddress, "" }
  serverlessTerminationProtection:
    stages:
      - dev
      - val
      - prod
      - main
  iamPermissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY}
  iamPath: ${env:IAM_PATH}

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  iam:
    role:
      path: ${self:custom.iamPath}
      permissionsBoundary: ${self:custom.iamPermissionsBoundary}
      statements:
        - Effect: 'Allow'
          Action:
            - '*'
          Resource: !GetAtt CognitoUserPool.Arn

resources:
  Conditions:
    CreateEmailConfiguration:
      Fn::Not:
        - Fn::Equals:
            - ''
            - ${self:custom.sesSourceEmailAddress}
    IsValOrProd:
      Fn::Or:
        - Fn::Equals:
            - ${sls:stage}
            - 'val'
        - Fn::Equals:
            - ${sls:stage}
            - 'prod'
        - Fn::Equals:
            - ${sls:stage}
            - 'mtsecfindingusers'
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${sls:stage}-user-pool
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: !If
            - IsValOrProd
            - true
            - false
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailConfiguration:
          Fn::If:
            - CreateEmailConfiguration
            - EmailSendingAccount: DEVELOPER
              SourceArn: !Sub arn:aws:ses:us-east-1:${AWS::AccountId}:identity/${self:custom.sesSourceEmailAddress}
            - !Ref AWS::NoValue
        Schema:
          - Name: given_name
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: family_name
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: state_code
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: phone_number
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: role
            AttributeDataType: String
            Mutable: true
            Required: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${sls:stage}-user-pool-client
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
        CallbackURLs:
          - ${self:custom.application_endpoint_url}
          - http://localhost:3000/
          - http://localhost:3003/
        DefaultRedirectURI: ${self:custom.application_endpoint_url}
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false # pragma: allowlist secret
        LogoutURLs:
          - ${self:custom.application_endpoint_url}
          - http://localhost:3000/
          - http://localhost:3003/
        SupportedIdentityProviders:
          - Okta
        UserPoolId: !Ref CognitoUserPool
      DependsOn: CognitoUserPoolIdentityProvider

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain:
          Fn::Join:
            - ''
            - - ${sls:stage}-login-
              - Ref: CognitoUserPoolClient
        UserPoolId: !Ref CognitoUserPool

    CognitoUserPoolIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        AttributeMapping:
          email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
          'custom:state_code': state
          'custom:role': cmsRoles
          given_name: firstName
          family_name: lastName
        IdpIdentifiers:
          - IdpIdentifier
        ProviderDetails:
          MetadataURL: ${self:custom.okta_metadata_url}
          IDPSignout: 'true'
        ProviderName: Okta
        ProviderType: SAML
        UserPoolId: !Ref CognitoUserPool

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${sls:stage}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthRole.Arn

    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'

                - Effect: 'Allow'
                  Action:
                    - 'execute-api:Invoke'
                  Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${self:custom.api_gateway_rest_api_name}/*

                - Effect: 'Allow'
                  Action:
                    - 's3:*'
                  Resource:
                    # Must use Join here.  See: https://github.com/serverless/serverless/issues/3565
                    - ${self:custom.document_uploads_bucket_arn}/allusers/*
                    - ${self:custom.qa_uploads_bucket_arn}/allusers/*
                    # This private bucket is used by any files stored "private" by Amplify
                    # https://docs.amplify.aws/lib/storage/configureaccess/q/platform/js/
                    - Fn::Join:
                        - ''
                        - - ${self:custom.document_uploads_bucket_arn}/private/
                          - '$'
                          - '{cognito-identity.amazonaws.com:sub}/*'

  Outputs:
    UserPoolId:
      Value: !Ref CognitoUserPool
    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient
    UserPoolClientDomain:
      Value:
        Fn::Join:
          - ''
          - - Ref: UserPoolDomain
            - .auth.
            - Ref: AWS::Region
            - .amazoncognito.com
    UserPoolSingleSignOnURL:
      Value:
        Fn::Join:
          - ''
          - - https://
            - Ref: UserPoolDomain
            - .auth.
            - Ref: AWS::Region
            - .amazoncognito.com
            - /saml2/idpresponse
    AudienceRestrictionURI:
      Value:
        Fn::Join:
          - ''
          - - 'urn:amazon:cognito:sp:'
            - Ref: CognitoUserPool
    IdentityPoolId:
      Value: !Ref CognitoIdentityPool
    Region:
      Value: !Sub ${AWS::Region}
