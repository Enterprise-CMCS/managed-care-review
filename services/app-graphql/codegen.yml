overwrite: true
schema: 'src/schema.graphql'
hooks:
  afterAllFileWrite:
    # Forgive me. This hook passes the edited files in as argv, so we && echo to make them harmless
    - cp src/schema.graphql ../app-web/src/gen/ && echo "HI"
    - cp src/schema.graphql ../cypress/gen/ && echo "HI"
    - cp ../app-web/src/gen/gqlClient.tsx ../app-api/src/gen/ && echo "HI"
generates:
  ../app-api/src/gen/gqlServer.d.ts:
    plugins:
      - 'typescript'
      - 'typescript-resolvers'
    config: # Go ahead and prettier it
      contextType: ../handlers/apollo_gql#Context
      useIndexSignature: true # Don't forget this or Apollo will give an inscrutable error
      defaultMapper: Partial<{T}>
      enumsAsTypes: true
      mappers:
        User: ../domain-models#UserType
        StateUser: ../domain-models#StateUserType
        CMSUser: ../domain-models#CMSUserType
        CMSApproverUser: ../domain-model#CMSApproverUserType
        HealthPlanPackage: ../domain-models#HealthPlanPackageType
        Rate: ../domain-models#RateType
        RateRevision: ../domain-models#RateRevisionWithContractsType
        RateStripped: ../domain-model#StrippedRateType
        Contract: ../domain-models#ContractType as ContractDomainType
        UnlockedContract: ../domain-models#UnlockedContractType as UnlockedContractDomainType
        ContractRevision: ../domain-models#ContractRevisionType
        ContractPackageSubmission: ../domain-models#ContractPackageSubmissionWithCauseType
        RatePackageSubmission: ../domain-models#RatePackageSubmissionWithCauseType
  ../app-web/src/gen/gqlClient.tsx:
    documents:
      - src/fragments/*.graphql
      - src/queries/*.graphql
      - src/mutations/*.graphql
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-react-apollo'
    config:
      enumsAsTypes: true
  ../../packages/common-code/src/gen/gqlClient.tsx:
    documents:
      - src/fragments/*.graphql
      - src/queries/*.graphql
      - src/mutations/*.graphql
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-react-apollo'
    config:
      enumsAsTypes: true
  ../../packages/helpers/src/gen/gqlClient.tsx:
    documents:
      - src/fragments/*.graphql
      - src/queries/*.graphql
      - src/mutations/*.graphql
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-react-apollo'
    config:
      enumsAsTypes: true
  ../../packages/constants/src/gen/gqlClient.tsx:
    documents:
      - src/fragments/*.graphql
      - src/queries/*.graphql
      - src/mutations/*.graphql
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-react-apollo'
    config:
      enumsAsTypes: true
  ../../packages/hpp/src/gen/gqlClient.tsx:
    documents:
      - src/fragments/*.graphql
      - src/queries/*.graphql
      - src/mutations/*.graphql
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-react-apollo'
    config:
      enumsAsTypes: true
  ../cypress/gen/gqlClient.ts:
    documents:
      - src/fragments/*.graphql
      - src/queries/*.graphql
      - src/mutations/*.graphql
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-react-apollo'
    config:
      enumsAsTypes: true
  ../../packages/mocks/src/gen/gqlClient.tsx:
    documents:
      - src/fragments/*.graphql
      - src/queries/*.graphql
      - src/mutations/*.graphql
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-react-apollo'
    config:
      enumsAsTypes: true
  # ./src/common-code/graphql/generated/graphql.schema.json:
  #   plugins:
  #     - 'introspection'
