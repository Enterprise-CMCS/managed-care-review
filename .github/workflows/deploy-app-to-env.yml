name: Promote to an environment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      stage_name:
        required: true
        type: string
      app_version:
        required: true
        type: string
      changed_services:
        required: true
        type: string
      aws_default_region:
        required: true
        type: string
      vite_app_auth_mode:
        required: true
        type: string
    secrets:
      aws_account_id:
        required: true
      nr_license_key:
        required: true
      serverless_license_key:
        required: true
      vpc_id:
        required: true
      sg_id:
        required: true
      iam_permissions_boundary:
        required: true
      iam_path:
        required: true
      subnet_private_a_id:
        required: true
      subnet_private_b_id:
        required: true
      subnet_private_c_id:
        required: true
      subnet_public_a_id:
        required: false

permissions:
  id-token: write

jobs:
  app-web:
    if: ${{ contains(inputs.changed_services, 'app-web') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          stage-name: ${{ inputs.stage_name }}
          changed-services: ${{ inputs.changed_services }}

      - name: Generate Code
        run: pnpm -r generate

      - name: Build packages
        shell: bash
        run: pnpm build:packages

      - name: deploy app-web
        id: deploy-app-web
        env:
          NODE_OPTIONS: --max_old_space_size=6000
          VITE_APP_AUTH_MODE: ${{ inputs.vite_app_auth_mode }}
          SERVERLESS_ACCESS_KEY: ${{ secrets.serverless_license_key }}
        run: |
          pushd services/app-web && npx serverless deploy --stage ${{ inputs.stage_name }}

  app-api:
    if: ${{ contains(inputs.changed_services, 'app-api') || contains(inputs.changed_services, 'app-proto') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          stage-name: ${{ inputs.stage_name }}
          changed-services: ${{ inputs.changed_services }}

      - name: Generate Code
        run: pnpm -r generate

      - name: Build packages
        shell: bash
        run: pnpm build:packages

      - name: upload app web gen directory
        uses: actions/upload-artifact@v4
        with:
          name: app-web-gen deploy ${{ inputs.stage_name }}
          path: ./services/app-web/src/gen

      - name: upload cypress gen directory
        uses: actions/upload-artifact@v4
        with:
          name: cypress-gen deploy ${{ inputs.stage_name }}
          path: ./services/cypress/gen

      - uses: actions/download-artifact@v4
        with:
          name: lambda-layers-prisma-client-migration
          path: ./services/app-api/lambda-layers-prisma-client-migration

      - name: Unzip prisma migration layer
        run: |
          tar -C ./services/app-api/lambda-layers-prisma-client-migration -xf ./services/app-api/lambda-layers-prisma-client-migration/nodejs.tar.gz
          rm -rf ./services/app-api/lambda-layers-prisma-client-migration/nodejs.tar.gz

      - uses: actions/download-artifact@v4
        with:
          name: lambda-layers-prisma-client-engine
          path: ./services/app-api/lambda-layers-prisma-client-engine

      - name: Unzip prisma engine layer
        run: |
          tar -C ./services/app-api/lambda-layers-prisma-client-engine -xf ./services/app-api/lambda-layers-prisma-client-engine/nodejs.tar.gz
          rm -rf ./services/app-api/lambda-layers-prisma-client-engine/nodejs.tar.gz

      - name: deploy app-api
        id: deploy-app-api
        env:
          NODE_OPTIONS: --max_old_space_size=6000
          APP_VERSION: ${{ inputs.app_version }}
          DATABASE_URL: AWS_SM
          VITE_APP_AUTH_MODE: ${{ inputs.vite_app_auth_mode }}
          EMAILER_MODE: SES
          NR_LICENSE_KEY: ${{ secrets.nr_license_key }}
          VPC_ID: ${{ secrets.vpc_id }}
          SG_ID: ${{ secrets.sg_id }}
          SUBNET_PRIVATE_A_ID: ${{ secrets.subnet_private_a_id }}
          SUBNET_PRIVATE_B_ID: ${{ secrets.subnet_private_b_id }}
          SUBNET_PRIVATE_C_ID: ${{ secrets.subnet_private_c_id }}
          IAM_PERMISSIONS_BOUNDARY: ${{ secrets.iam_permissions_boundary }}
          IAM_PATH: ${{ secrets.iam_path }}
        run: |
          pushd services/app-api && npx serverless deploy --stage ${{ inputs.stage_name }}

      - name: run migrations
        id: run-migrations
        working-directory: services/app-api
        env:
          STAGE_NAME: ${{ inputs.stage_name }}
        run: |
          ./scripts/invoke-migrate-lambda.sh app-api-$STAGE_NAME-migrate \$LATEST "Migration of the database failed."
