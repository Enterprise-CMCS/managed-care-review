name: Promote to an environment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      stage_name:
        required: true
        type: string
      changed_services:
        required: true
        type: string
      aws_default_region:
        required: true
        type: string
    secrets:
      slack_webhook_url:
        required: true
      aws_account_id:
        required: true
      nr_license_key:
        required: true
      serverless_license_key:
        required: true
      cloudfront_cert_arn:
        required: false
      cloudfront_domain_name:
        required: false
      cloudfront_sb_domain_name:
        required: false
      vpc_id:
        required: true
      sg_id:
        required: true
      iam_permissions_boundary:
        required: true
      iam_path:
        required: true
      subnet_private_a_id:
        required: true
      subnet_private_b_id:
        required: true
      subnet_private_c_id:
        required: true
      subnet_public_a_id:
        required: false
      dev_db_sm_arn:
        required: false
      dev_aurora_arn:
        required: false

permissions:
  id-token: write

jobs:
  # deploy the OIDC service first, as subsequent deploys may depend on updated OIDC permissions
  github-oidc:
    if: ${{ contains(inputs.changed_services, 'github-oidc') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: build scripts
        shell: bash
        run: pnpm -r build:ci-scripts

      - name: Set the correct stage name for the bootstrapped OIDC role based on the environment
        id: set-oidc-stage-name
        shell: bash
        # the dev environment uses 'main' as the stage name; otherwise the stage name is same as the environment name
        # if the environment isn't one of [dev, val, prod], fail the job
        run: |
          echo "stage-name=$(
            if [[ "${{ inputs.environment }}" == "val" || "${{ inputs.environment }}" == "prod" ]]; then
              echo "${{ inputs.environment }}";
            elif [[ ${{ inputs.environment }} == "dev" ]]; then
              echo "main";
            else
              echo "Invalid environment: ${{ inputs.environment }}" >&2;
              kill -HUP $$
            fi
          )" >> $GITHUB_OUTPUT

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          # use the manually bootstrapped OIDC role to solve the chicken-and-egg problem of deploying the OIDC service via OIDC
          stage-name: ${{ steps.set-oidc-stage-name.outputs.stage-name }}

      - name: deploy github-oidc
        id: deploy-github-oidc
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.serverless_license_key }}
        run: |
          pushd services/github-oidc && npx serverless deploy --stage ${{ inputs.stage_name }}

  postgres:
    # for this and subsequent jobs, wait for the OIDC service to deploy (unless it was skipped)
    needs: github-oidc
    if: ${{ always() && contains(inputs.changed_services, 'postgres') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          stage-name: ${{ inputs.stage_name }}
          changed-services: ${{ inputs.changed_services }}

      - name: deploy postgres
        id: deploy-postgres
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.serverless_license_key }}
          SLACK_WEBHOOK: ${{ secrets.slack_webhook_url }}
          VPC_ID: ${{ secrets.vpc_id }}
          SG_ID: ${{ secrets.sg_id }}
          SUBNET_PRIVATE_A_ID: ${{ secrets.subnet_private_a_id }}
          SUBNET_PRIVATE_B_ID: ${{ secrets.subnet_private_b_id }}
          SUBNET_PRIVATE_C_ID: ${{ secrets.subnet_private_c_id }}
          SUBNET_PUBLIC_A_ID: ${{ secrets.subnet_public_a_id }}
          IAM_PERMISSIONS_BOUNDARY: ${{ secrets.iam_permissions_boundary }}
          IAM_PATH: ${{ secrets.iam_path }}
        run: |
          pushd services/postgres && npx serverless deploy --stage ${{ inputs.stage_name }}

      - name: Create logical database
        if: ${{ github.ref != 'refs/heads/main' }}
        env:
          STAGE_NAME: ${{ inputs.stage_name }}
          DEV_DB_SM_ARN: ${{ secrets.dev_db_sm_arn }}
          DEV_AURORA_ARN: ${{ secrets.dev_aurora_arn }}
        run: |
          chmod +x services/postgres/db-manager.sh
          ./services/postgres/scripts/db-manager.sh create $STAGE_NAME $DEV_DB_SM_ARN $STAGE_NAME

      - name: Upload VM scripts to S3
        run: |
          pushd services/postgres
          chmod +x scripts/uploadUserData.sh
          ./scripts/uploadUserData.sh ${{ inputs.stage_name }}

  ui:
    needs: github-oidc
    if: ${{ always() && contains(inputs.changed_services, 'ui') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          stage-name: ${{ inputs.stage_name }}
          changed-services: ${{ inputs.changed_services }}

      - name: deploy ui
        id: deploy-ui
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.serverless_license_key }}
          CLOUDFRONT_CERT_ARN: ${{ secrets.cloudfront_cert_arn }}
          CLOUDFRONT_DOMAIN_NAME: ${{ secrets.cloudfront_domain_name }}
        run: |
          pushd services/ui && npx serverless deploy --stage ${{ inputs.stage_name }}

  storybook:
    needs: github-oidc
    if: ${{ always() && contains(inputs.changed_services, 'storybook') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          stage-name: ${{ inputs.stage_name }}
          changed-services: ${{ inputs.changed_services }}

      - name: deploy storybook
        id: deploy-storybook
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.serverless_license_key }}
          CLOUDFRONT_CERT_ARN: ${{ secrets.cloudfront_cert_arn }}
          CLOUDFRONT_SB_DOMAIN_NAME: ${{ secrets.cloudfront_sb_domain_name }}
        run: |
          pushd services/storybook && npx serverless deploy --stage ${{ inputs.stage_name }}

  uploads:
    needs: github-oidc
    if: ${{ always() && contains(inputs.changed_services, 'uploads') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          stage-name: ${{ inputs.stage_name }}
          changed-services: ${{ inputs.changed_services }}

      - uses: actions/download-artifact@v4
        with:
          name: lambda-layers-clamav
          path: ./services/uploads/lambda-layers-clamav

      - name: Unzip clamav layer
        run: |
          unzip -d ./services/uploads/lambda-layers-clamav ./services/uploads/lambda-layers-clamav/lambda_layer.zip
          rm -f ./services/uploads/lambda-layers-clamav/lambda_layer.zip

      - name: deploy uploads
        id: deploy-uploads
        env:
          NR_LICENSE_KEY: ${{ secrets.nr_license_key }}
          SERVERLESS_ACCESS_KEY: ${{ secrets.serverless_license_key }}
          VPC_ID: ${{ secrets.vpc_id }}
          SG_ID: ${{ secrets.sg_id }}
          SUBNET_PRIVATE_A_ID: ${{ secrets.subnet_private_a_id }}
          SUBNET_PRIVATE_B_ID: ${{ secrets.subnet_private_b_id }}
          SUBNET_PRIVATE_C_ID: ${{ secrets.subnet_private_c_id }}
          SUBNET_PUBLIC_A_ID: ${{ secrets.subnet_public_a_id }}
          IAM_PERMISSIONS_BOUNDARY: ${{ secrets.iam_permissions_boundary }}
          IAM_PATH: ${{ secrets.iam_path }}
        run: |
          pushd services/uploads && npx serverless deploy --stage ${{ inputs.stage_name }}

  infra-api:
    needs: github-oidc
    if: ${{ always() && contains(inputs.changed_services, 'infra-api') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          stage-name: ${{ inputs.stage_name }}
          changed-services: ${{ inputs.changed_services }}

      - name: deploy infra-api
        id: deploy-infra-api
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.serverless_license_key }}
          IAM_PERMISSIONS_BOUNDARY: ${{ secrets.iam_permissions_boundary }}
          IAM_PATH: ${{ secrets.iam_path }}
        run: |
          pushd services/infra-api && npx serverless deploy --stage ${{ inputs.stage_name }}

  ui-auth:
    needs: [github-oidc, infra-api, ui, uploads]
    if: ${{ always() && contains(inputs.changed_services, 'ui-auth') }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup env
        uses: ./.github/actions/setup_env

      - name: Get AWS credentials
        uses: ./.github/actions/get_aws_credentials
        with:
          region: ${{ inputs.aws_default_region }}
          account-id: ${{ secrets.aws_account_id }}
          stage-name: ${{ inputs.stage_name }}
          changed-services: ${{ inputs.changed_services }}

      - name: deploy ui-auth
        id: deploy-ui-auth
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.serverless_license_key }}
          IAM_PERMISSIONS_BOUNDARY: ${{ secrets.iam_permissions_boundary }}
          IAM_PATH: ${{ secrets.iam_path }}
        run: |
          pushd services/ui-auth && npx serverless deploy --stage ${{ inputs.stage_name }}
